name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
    
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        container:
          image: node:20
        # Commented out because the image (custom) is not accessible
#        services:
#          mongo-db:
#            image: sidd/mongo-db:non-prod
##            ports:  # Not needed as containers (Job & Service) sharing same docker network bridge have all ports open.
##              - 27017:27017
#            options:  # set container name/label which can also be used in env variables.
#              --name mongo
#        env:
#          MONGO_URI: 'mongodb://mongo:27017/superData'  # app ports
#          MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
#          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

        # Commented out because of using job container (node) for code coverage.
#          - name: Setup NodeJS Version
#            uses: actions/setup-node@v3
#            with:
#              node-version: 20

          - name: Cache NPM dependencies
            uses: actions/cache@v3
            with:
              path: ~/.npm
              key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

          - name: Install Dependencies
            run: npm install

          - name: Check Code Coverage
            continue-on-error: true
            run: npm run coverage

          - name: Archive Test Result
            uses: actions/upload-artifact@v3
            with:
              name: Code-Coverage-Result
              path: coverage

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions:
          packages: write
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: GHCR Login
            uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Docker build and push
            uses: docker/build-push-action@v4
            with:
              context: .
              push: false # Disable push temporarily for testing.
              tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
        name: Deploy to Development
        runs-on: ubuntu-latest
        needs: docker
        environment:
          name: development
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Install kubectl
            uses: azure/setup-kubectl@v3
            with:
              version: 'v1.26.0'

          - name: Set Kube Context
            uses: azure/k8s-set-context@v4
            with:
              method: kubeconfig
              kubeconfig: ${{ secrets.KUBECONFIG }}

          - name: Verify kubectl version
            run: |
              kubectl version -short -o yaml